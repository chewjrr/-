// src/Race.js
import React, { useState, useEffect } from 'react';
import './Race.css';

const characters = ['üê¢', 'üêá', 'üêâ', 'üêé', 'üêï'];

const Race = () => {
    const [positions, setPositions] = useState([]);
    const [raceOver, setRaceOver] = useState(false);
    const [isRacing, setIsRacing] = useState(false);
    const totalLaps = 5;
    const trackDiameter = 400; // –î–∏–∞–º–µ—Ç—Ä —Ç—Ä–µ–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    const radius = trackDiameter / 2; // –†–∞–¥–∏—É—Å –∫—Ä—É–≥–∞

    useEffect(() => {
        if (isRacing) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
            const initialPositions = Array.from({ length: characters.length }, () => 0);
            setPositions(initialPositions);

            // –ó–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏
            const interval = setInterval(() => {
                if (!raceOver) {
                    updatePositions();
                }
            }, 100);

            return () => clearInterval(interval);
        }
    }, [isRacing, raceOver]);

    const updatePositions = () => {
        setPositions(prevPositions => {
            const newPositions = prevPositions.map(pos => {
                // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç 0.1 –¥–æ 0.3 (–¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥)
                const speed = Math.random() * 10 + 3;
                return pos + speed; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–Ω–∫–∏
            if (newPositions.every(pos => pos >= totalLaps * Math.PI * radius)) {
                setRaceOver(true);
                setIsRacing(false);
            }

            return newPositions;
        });
    };

    const startRace = () => {
        setRaceOver(false);
        setIsRacing(true);
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–¥–µ—Ä–∞
    const leaderIndex = positions.reduce((maxIndex, pos, index, arr) =>
        pos > arr[maxIndex] ? index : maxIndex, 0);

    return (
        <div className="race-container">
            <div className="stats">
                <h1>–ì–æ–Ω–∫–∞!</h1>
                <button onClick={startRace} disabled={isRacing}>
                    –ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É
                </button>
                <div className="results">
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h2>
                    {positions.map((pos, index) => (
                        <p key={index}>
                            {characters[index]}: {Math.floor(pos / (Math.PI * radius))} –∫—Ä—É–≥–æ–≤
                            {index === leaderIndex && " (–õ–∏–¥–µ—Ä!)"}
                        </p>
                    ))}
                </div>
            </div>
            <div className="track">
                {characters.map((char, index) => {
                    // –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
                    const angle = (positions[index] / (Math.PI * radius)) * 2 * Math.PI; 
                    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∫—Ä—É–≥—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
                    const x = radius + radius * Math.cos(angle); // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ X (—Ü–µ–Ω—Ç—Ä + —Ä–∞–¥–∏—É—Å * –∫–æ—Å–∏–Ω—É—Å)
                    const y = radius + radius * Math.sin(angle); // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ Y (—Ü–µ–Ω—Ç—Ä + —Ä–∞–¥–∏—É—Å * —Å–∏–Ω—É—Å)

                    return (
                        <div key={index} className="runner" style={{
                            left: `${x}px`,
                            bottom: `${y}px`,
                        }}>
                            {char}
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

export default Race;